AWSTemplateFormatVersion: 2010-09-09
Description: App Migration - VPC and global components

Parameters:
  ProjectName:
    Description: project name
    Type: String

Resources:
  vpc:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref vpc
      InternetGatewayId: !Ref InternetGateway

  NatGatewayEIPA:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIPA.AllocationId
      SubnetId: !Ref SubnetPublicA
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-NatGatewayA
  
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-RouteTablePublic

  RouteTablePublicInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      

  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Sub 10.0.0.0/24
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-SubnetPublicA

  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Sub 10.0.1.0/24
      VpcId: !Ref vpc
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-SubnetPublicB


  RouteTableAssociationPublicA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPublicB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref RouteTablePublic

  albSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for Application Load balancer
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-ALBSG

  ServerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SecurityGroup for production server
      VpcId: !Ref vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref albSG
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-ServerSG

  
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      Name: !Sub ${ProjectName}-ALB
      SecurityGroups:
        - !Ref albSG
      Subnets:
      - !Ref SubnetPublicA
      - !Ref SubnetPublicB
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-ALB

  HTTPALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      DefaultActions:
        -
          Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: Forbidden
            StatusCode: 403
      Port: 80
      Protocol: HTTP

  ListenerRuleHttp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      Conditions:
      - Field: path-pattern
        Values:
        - '/'
      ListenerArn:
        Ref: HTTPALBListener
      Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /index.html
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Sub ${ProjectName}-TargetGroup
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Sub ${ProjectName}-TargetGroup
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 21
      UnhealthyThresholdCount: 2
      VpcId: !Ref vpc

  
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Ansible confguration
      AWS::CloudFormation::Init:
        config:
          files:
            /tmp/index.html:
              content: !Sub |
                <html><body><h1>test2</h1></body></html>
    Properties:
      KeyName: vygon-bastion-dev
      InstanceType: t2.micro
      ImageId: ami-0080e4c5bc078760e
      AssociatePublicIpAddress: true
      SecurityGroups: 
      - !Ref ServerSG
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
          cd /usr/local/src
          yum -y update
          #CodeDeploy
          yum install ruby wget -y
          cd /home/ec2-user
          wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto
          service codedeploy-agent start
          #END-CodeDeploy
          yum -y install httpd
          mkdir /var/www/test1
          cp /tmp/index.html /var/www/html
          service httpd start
          chkconfig httpd on

          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource AutoscalingGroup --region ${AWS::Region}

  AutoscalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      CreationPolicy:
        ResourceSignal:
          Count: 1
          Timeout: PT5M
      UpdatePolicy:
        AutoScalingScheduledAction:
          IgnoreUnmodifiedGroupSizeProperties: 'true'
        AutoScalingRollingUpdate:
          MinInstancesInService: '0'
          MaxBatchSize: '1'
          PauseTime: PT4M
          WaitOnResourceSignals: 'true'
      Properties:
        # AvailabilityZones: [!Select [0, !GetAZs ],!Select [1, !GetAZs ]]
        DesiredCapacity: 1
        HealthCheckGracePeriod: 20
        HealthCheckType: EC2
        LaunchConfigurationName: !Ref 'LaunchConfig'
        TargetGroupARNs:
          - !Ref TargetGroup
        VPCZoneIdentifier: [!Ref SubnetPublicA, !Ref SubnetPublicA]
        MaxSize: 1
        MinSize: 1
        Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ASG'
          PropagateAtLaunch: true


Outputs:
  IOLABVPC:
    Description: IOLAB VPC
    Value: !Ref vpc

  IOLABRouteTablePublic:
    Description: IOLAB Public Route table
    Value: !Ref RouteTablePublic

  ALBSG:
    Description: IOLAB Application load balancer Security group
    Value: !Ref albSG

  OutSubnetPublicA:
    Description: Subnet Public A
    Value: !Ref SubnetPublicA

  OutSubnetPublicB:
    Description: Subnet Public B
    Value: !Ref SubnetPublicB

  # OutAlbDnsName:
  #   Description: ALB DNS Name
  #   Value: !GetAtt ALB.DNSName

  # OutHTTPALBListener:
  #   Description: HTTP ALB Listener
  #   Value: !Ref HTTPALBListener